#!/bin/sh

# requires gnupg
# assumes existence of github secret passed as env variable GPG_PASSPHRASE
# decrypt with gpg --batch --passphrase "$GPG_PASSPHRASE" file.gpg

. ./download-methods
. ./supported-files
. ./error-handler

# see if a file is on the supported files list

check_file_list(){
  for somefile in $valid_files
  do
    if [ "$1" = "$somefile" ]
    then
      return
    fi
  done
  fail "File not found in the list of valid files."
}

# see if a file already exists

exists_in_local(){
  name_partial="$1"
  file_hits=0
  for file in "$name_partial"*
  do
    if [ -e "$file" ]
    then
    file_hits=$((file_hits + 1))
    fi
  done

  if $file_hits -eq 0
  then
    return
  else
    error "Check for existing file encountered more than one positive result."
    fail "Bad filename glob used to determine if local file exists."
  fi
}

# checksum a file

sum_file(){
  sha256sum "$1" > "$1".sha256
}

# encrypt a file

encrypt_local(){
  # TODO add error handling
  gpg --batch --cipher-algo CAMELLIA128 --passphrase "$GPG_PASSPHRASE" -c "$1"
}

# compare a local hash to a remote hash
# TODO need to figure out if sha256sum will allow comparing a hash to a file with a diff name

compare_sums(){
  download "$1" "sum"
  # complications here from fuzzy naming with globs



}

# move old version and hash to another directory for discretionary deletion

move_previous(){
  mv -n -t ./old ./"$1"*
}

# remove files without matching sha256sums and sha256sums without matching files

clean(){

  for file in ./* ; do
    # ${file: :-10} works in alpine but is technically not POSIX-compliant
    trimmed_filename=$(echo "$file" | cut -b -$(( ${#file} - 10)))
    if [ "$file" != "${trimmed_filename}.sha256sum" ] # file is not a sha256sum
    then
      if [ ! -e "${file}.sha256sum" ] # check for corresponding checksum
      then
        rm "$file" # delete orphaned file
      fi
    else # file is a sha256sum
      if [ ! -e "$trimmed_filename" ] # check for corresponding file
      then
        rm "$file" # delete orphaned checksum
      fi
    fi
  done
}

main() {
  if [ "$2" ]
  then
    fail "Incorrect number of arguments. Only pass pre-formatted file name."
  fi

  check_file_list "$1"
  if exists_in_local "$1"
  then
    if compare_sums "$1"
    then
      exit 0
    fi
  fi
  move_previous "$1"
  download "$1" "file"
  sum_file "$1"
  encrypt_local "$1" "$GPG_PASSPHRASE"
}

main "$@"
